#include <iostream>
#include <cstddef>

class Node {
public:
    int data;
    Node *prev;
    Node *next;
    
    Node(int d) {
        this->data = d;
        this->prev = NULL;
        this->next = NULL;
    }
};

void print(Node *head) {
    Node* temp = head;
    while(temp != nullptr) {
        std::cout << temp->data << " ";
        temp = temp->next;
    }
    std::cout << std::endl; 
}


int getlength(Node* head) {
    int len = 0;
    Node* temp = head;
    while(temp != NULL) {
        len++;
        temp = temp->next; 
    }
    return len;
}

void insertathead(Node* &head, Node* &tail, int d) {
    Node* temp = new Node(d);
    temp->next = head;
    head = temp;
    if (tail == nullptr) {
        tail = temp;
    }
}


void insertattail(Node* &tail, int d) { 
    Node* temp = new Node(d);
    if (tail == nullptr) {
        // If the list is empty, set both head and tail to the new node
        tail = temp;
        return;
    }
    tail->next = temp;
    temp->prev = tail; 
    tail = temp;
}

int main() {
    Node *head = nullptr;
    Node *tail = nullptr;
    
    // Insert 5 and print
    insertathead(head, tail, 5);
    print(head);
    
    // Insert 25 and print
    insertattail(tail, 25);
    print(head);
    
    // Insert 26 and print
    insertattail(tail, 26);
    print(head);

    return 0; 
}


Output:
5 
5 25 
5 25 26 
